// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Quiz.CSharp.Data;
using Quiz.CSharp.Data.Data;

#nullable disable

namespace Quiz.CSharp.Data.Migrations
{
    [DbContext(typeof(CSharpDbContext))]
    [Migration("20250719220040_AddUserInfoToUserProgress")]
    partial class AddUserInfoToUserProgress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Quiz.CSharp.Data.Entities.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("icon");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_collections");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_collections_code");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_collections_is_active");

                    b.HasIndex("SortOrder")
                        .HasDatabaseName("ix_collections_sort_order");

                    b.ToTable("collections", (string)null);
                });

            modelBuilder.Entity("Quiz.CSharp.Data.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CollectionId")
                        .HasColumnType("integer")
                        .HasColumnName("collection_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("difficulty");

                    b.Property<int>("EstimatedTimeMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_time_minutes");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("prompt");

                    b.Property<string>("Subcategory")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("subcategory");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("question_type")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)")
                        .HasColumnName("question_type");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.HasIndex("CollectionId");

                    b.ToTable("questions", (string)null);

                    b.HasDiscriminator<string>("question_type").HasValue("Question");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Quiz.CSharp.Data.Entities.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("answer");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("integer")
                        .HasColumnName("attempt_number");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.Property<int>("TimeSpentSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("time_spent_seconds");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_answers");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_user_answers_question_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_answers_user_id");

                    b.HasIndex("UserId", "QuestionId")
                        .HasDatabaseName("ix_user_answers_user_id_question_id");

                    b.ToTable("user_answers", (string)null);
                });

            modelBuilder.Entity("Quiz.CSharp.Data.Entities.UserProgress", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.Property<int>("CollectionId")
                        .HasColumnType("integer")
                        .HasColumnName("collection_id");

                    b.Property<int>("AnsweredQuestions")
                        .HasColumnType("integer")
                        .HasColumnName("answered_questions");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("integer")
                        .HasColumnName("correct_answers");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastAnsweredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_answered_at");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("SuccessRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("success_rate");

                    b.Property<string>("TelegramUsername")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("telegram_username");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("integer")
                        .HasColumnName("total_questions");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("UserId", "CollectionId")
                        .HasName("pk_user_progress");

                    b.HasIndex("CollectionId")
                        .HasDatabaseName("ix_user_progress_collection_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_progress_user_id");

                    b.ToTable("user_progress", (string)null);
                });

            modelBuilder.Entity("Quiz.CSharp.Data.Entities.CodeWritingQuestion", b =>
                {
                    b.HasBaseType("Quiz.CSharp.Data.Entities.Question");

                    b.ToTable("questions", (string)null);

                    b.HasDiscriminator().HasValue("code_writing");
                });

            modelBuilder.Entity("Quiz.CSharp.Data.Entities.ErrorSpottingQuestion", b =>
                {
                    b.HasBaseType("Quiz.CSharp.Data.Entities.Question");

                    b.ToTable("questions", (string)null);

                    b.HasDiscriminator().HasValue("error_spotting");
                });

            modelBuilder.Entity("Quiz.CSharp.Data.Entities.FillQuestion", b =>
                {
                    b.HasBaseType("Quiz.CSharp.Data.Entities.Question");

                    b.ToTable("questions", (string)null);

                    b.HasDiscriminator().HasValue("fill");
                });

            modelBuilder.Entity("Quiz.CSharp.Data.Entities.MCQQuestion", b =>
                {
                    b.HasBaseType("Quiz.CSharp.Data.Entities.Question");

                    b.ToTable("questions", (string)null);

                    b.HasDiscriminator().HasValue("mcq");
                });

            modelBuilder.Entity("Quiz.CSharp.Data.Entities.OutputPredictionQuestion", b =>
                {
                    b.HasBaseType("Quiz.CSharp.Data.Entities.Question");

                    b.ToTable("questions", (string)null);

                    b.HasDiscriminator().HasValue("output_prediction");
                });

            modelBuilder.Entity("Quiz.CSharp.Data.Entities.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("Quiz.CSharp.Data.Entities.Question");

                    b.ToTable("questions", (string)null);

                    b.HasDiscriminator().HasValue("true_false");
                });

            modelBuilder.Entity("Quiz.CSharp.Data.Entities.Question", b =>
                {
                    b.HasOne("Quiz.CSharp.Data.Entities.Collection", "Collection")
                        .WithMany("Questions")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_collections_collection_id");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Quiz.CSharp.Data.Entities.UserAnswer", b =>
                {
                    b.HasOne("Quiz.CSharp.Data.Entities.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_answers_questions_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Quiz.CSharp.Data.Entities.UserProgress", b =>
                {
                    b.HasOne("Quiz.CSharp.Data.Entities.Collection", "Collection")
                        .WithMany("UserProgress")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_progress_collection_collection_id");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Quiz.CSharp.Data.Entities.Collection", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserProgress");
                });

            modelBuilder.Entity("Quiz.CSharp.Data.Entities.Question", b =>
                {
                    b.Navigation("UserAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
